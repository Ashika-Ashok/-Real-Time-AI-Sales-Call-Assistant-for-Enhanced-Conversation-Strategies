1.Extracting Insights from Customer Data

Suppose you have a list of dictionaries, where each dictionary represents a customer's data. Each dictionary has the following keys: name, age, orders. The orders key contains a list of order IDs.

customer_data = [
    {'name': 'Alice', 'age': 30, 'orders': [101, 103, 105]},
    {'name': 'Bob', 'age': 25, 'orders': [102, 104]},
    {'name': 'Charlie', 'age': 28, 'orders': [106]}
]
Write a function get_total_orders(customer_list) that takes the customer_data list as a parameter and returns the total number of orders across all customers.
-->def get_total_orders(customer_list):
    orders=0
    for customer in customer_list:
        orders+=len(customer['orders'])
    return orders

2.Temperature Data Mapping

A compilation of temperature readings over a week is provided. Each temperature corresponds to a specific day.

temperature_data = [72, 75, 68, 70, 74, 79, 81]
days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
Expected result looks like below:

temperature_dict = {
    'Monday': 72,
    'Tuesday': 75,
    'Wednesday': 68,
    'Thursday': 70,
    'Friday': 74,
    'Saturday': 79,
    'Sunday': 81
}
->temperature_dict = {}
for day, temp in zip(days, temperature_data):
    temperature_dict[day] = temp



3.Inventory Revenue Calculation

The inventory of a grocery store is being managed. Each product is represented as a dictionary containing keys product_id, name, quantity, and price.

inventory = [
    {'product_id': 101, 'name': 'Apple', 'quantity': 50, 'price': 0.5},
    {'product_id': 102, 'name': 'Banana', 'quantity': 30, 'price': 0.3},
    {'product_id': 103, 'name': 'Orange', 'quantity': 40, 'price': 0.4}
]
Craft a function named calculate_total_revenue(inventory) that computes the overall revenue generated by the products in the inventory.

->def calculate_total_revenue(inventory):
    revenue=0
    total_price=1
    for product in inventory:
        total_price=product["quantity"]*product["price"]
        revenue+=total_price
    return revenue

4.Social Media Engagement Rate

Information regarding user interaction with posts on a social media platform is available. Each post is represented as a dictionary containing post_id, likes, comments, and shares

post_data = [
    {'post_id': 101, 'likes': 50, 'comments': 12, 'shares': 5},
    {'post_id': 102, 'likes': 75, 'comments': 8, 'shares': 10},
    {'post_id': 103, 'likes': 30, 'comments': 5, 'shares': 2}
]
Opt for the accurate function calculate_engagement_rate(posts) that evaluates the mean engagement rate across all posts. The engagement rate is defined as the total sum of likes, comments, and shares divided by the total number of posts.
->
def calculate_engagement_rate(posts):
    total_engagement = sum(post['likes'] + post['comments'] + post['shares'] for post in posts)
    avg_engagement_rate = total_engagement / len(posts)
    return avg_engagement_rate


Shared Course Enrollments

The task involves overseeing student course enrollments. Each student's information is captured using a dictionary with student_id, name, and courses attributes. The courses attribute contains a set of course IDs.

students = [
    {'student_id': 1, 'name': 'Alice', 'courses': {101, 103, 105}},
    {'student_id': 2, 'name': 'Bob', 'courses': {102, 104}},
    {'student_id': 3, 'name': 'Charlie', 'courses': {106}}
]
Indicate the appropriate choice for a function find_common_courses(students) that produces a set of course IDs in which at least two students are enrolled.
->def find_common_courses(students):
    course_counter = {}
    for student in students:
        for course in student['courses']:
            course_counter[course] = course_counter.get(course, 0) + 1

    common_courses = {course for course, count in course_counter.items() if count >= 2}
    return common_courses

6.Duplicate Data Check

The objective is to assess a list of data entries and identify any duplications.

data_entries = ['apple', 'banana', 'orange', 'apple', 'grape', 'banana']
Select the appropriate options that effectively eliminate duplicate entries from the data_entries list.
  ->unique_entries = []
for entry in data_entries:
    if entry not in unique_entries:
        unique_entries.append(entry)


unique_entries = list(set(data_entries))


unique_entries = []
for i in range(len(data_entries)):
    if data_entries[i] not in data_entries[:i]:
        unique_entries.append(data_entries[i])

7.Student Exam Scores

A compilation of student names and their respective exam scores is provided.

students = ['Alice', 'Bob', 'Charlie', 'David']
scores = [85, 92, 78, 95]
Choose the accurate options that lead to the creation of a dictionary in which student names function as keys and exam scores function as values.

->score_dict = {}
for i in range(len(students)):
    score_dict[students[i]] = scores[i]


score_dict = {}
for i, student in enumerate(students):
    score_dict[student] = scores[i]
